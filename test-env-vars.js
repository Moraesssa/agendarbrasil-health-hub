// Script para testar se as vari√°veis de ambiente est√£o configuradas
const supabaseUrl = 'https://ulebotjrsgheybhpdnxd.supabase.co';

async function testEnvironmentVariables() {
  console.log('üß™ TESTANDO VARI√ÅVEIS DE AMBIENTE\n');

  try {
    // Criar um payload simples para testar se a fun√ß√£o consegue ler as vari√°veis
    const testPayload = {
      test: true,
      check_env: true
    };

    const response = await fetch(`${supabaseUrl}/functions/v1/stripe-webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'stripe-signature': 'test-signature-for-env-check'
      },
      body: JSON.stringify(testPayload)
    });

    const responseText = await response.text();
    
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìù Response: ${responseText}`);

    // Analisar a resposta para entender o problema
    if (responseText.includes('STRIPE_SECRET_KEY n√£o configurada')) {
      console.log('\n‚ùå PROBLEMA: STRIPE_SECRET_KEY n√£o est√° configurada');
      console.log('   Solu√ß√£o: Adicionar no Supabase Dashboard');
    } else if (responseText.includes('Stripe n√£o configurado')) {
      console.log('\n‚ùå PROBLEMA: Vari√°veis de ambiente n√£o est√£o sendo lidas');
      console.log('   Solu√ß√£o: Verificar configura√ß√£o no Supabase');
    } else if (responseText.includes('Signature inv√°lida')) {
      console.log('\n‚ö†Ô∏è  VARI√ÅVEIS CONFIGURADAS, mas signature ainda inv√°lida');
      console.log('   Isso √© esperado com dados de teste');
    } else {
      console.log('\nüîç Resposta inesperada - analisar logs');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testEnvironmentVariables();