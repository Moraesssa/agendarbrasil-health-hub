// Sistema de logging otimizado para produ√ß√£o
class ProductionLogger {
  private isProduction = process.env.NODE_ENV === 'production';
  
  // Log performance de queries cr√≠ticas
  logQueryPerformance(operation: string, duration: number, details?: any) {
    if (this.isProduction) {
      // Em produ√ß√£o, logar apenas queries lentas
      if (duration > 2000) {
        console.warn(`üêå Slow Query: ${operation} took ${duration}ms`, details);
      }
    } else {
      // Em desenvolvimento, logar todas
      console.log(`‚ö° Query: ${operation} - ${duration}ms`, details);
    }
  }

  // Log erros cr√≠ticos com contexto
  logError(operation: string, error: any, context?: any) {
    const errorData = {
      operation,
      error: error.message || error,
      timestamp: new Date().toISOString(),
      context,
      userAgent: navigator.userAgent,
      url: window.location.href
    };

    console.error('üö® Production Error:', errorData);
    
    // Em produ√ß√£o, poderia enviar para servi√ßo de monitoramento
    if (this.isProduction) {
      // TODO: Integrar com servi√ßo de monitoramento (Sentry, etc.)
    }
  }

  // Log sucesso de opera√ß√µes cr√≠ticas
  logSuccess(operation: string, data?: any) {
    if (!this.isProduction) {
      console.log(`‚úÖ Success: ${operation}`, data);
    }
  }

  // Log mudan√ßas de estado importantes
  logStateChange(component: string, from: any, to: any) {
    if (!this.isProduction) {
      console.log(`üîÑ State Change in ${component}:`, { from, to });
    }
  }
}

export const productionLogger = new ProductionLogger();