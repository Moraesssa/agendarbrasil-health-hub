/**
 * Script para verificar o acesso ao webhook do Supabase
 * Testa a conectividade e configura√ß√£o do webhook
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
    console.log('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas no .env');
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyWebhookAccess() {
    console.log('üîç Verificando acesso ao webhook...\n');

    try {
        // 1. Verificar conex√£o com Supabase
        console.log('1. Testando conex√£o com Supabase...');
        const { data: healthCheck, error: healthError } = await supabase
            .from('Usuarios')
            .select('count')
            .limit(1);

        if (healthError) {
            console.error('‚ùå Erro na conex√£o com Supabase:', healthError.message);
            return false;
        }
        console.log('‚úÖ Conex√£o com Supabase estabelecida');

        // 2. Verificar se a tabela my_table existe
        console.log('\n2. Verificando se a tabela "my_table" existe...');
        const { data: tableCheck, error: tableError } = await supabase
            .rpc('check_table_exists', { table_name: 'my_table' })
            .catch(() => null);

        if (tableError || !tableCheck) {
            console.log('‚ö†Ô∏è  Tabela "my_table" n√£o encontrada');
            console.log('   Isso √© normal se for um webhook de teste');
        } else {
            console.log('‚úÖ Tabela "my_table" encontrada');
        }

        // 3. Verificar triggers existentes
        console.log('\n3. Verificando triggers existentes...');
        const { data: triggers, error: triggerError } = await supabase
            .rpc('get_triggers_info')
            .catch(() => ({ data: null, error: 'Fun√ß√£o n√£o dispon√≠vel' }));

        if (triggerError) {
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar triggers:', triggerError);
        } else if (triggers) {
            console.log('‚úÖ Triggers encontrados:', triggers.length);
            triggers.forEach(trigger => {
                if (trigger.trigger_name === 'my_webhook') {
                    console.log(`   üìå Webhook encontrado: ${trigger.trigger_name}`);
                }
            });
        }

        // 4. Testar endpoint do webhook
        console.log('\n4. Testando endpoint do webhook...');
        try {
            const response = await fetch('http://host.docker.internal:3000', {
                method: 'GET',
                timeout: 5000
            });
            
            if (response.ok) {
                console.log('‚úÖ Endpoint do webhook acess√≠vel');
            } else {
                console.log(`‚ö†Ô∏è  Endpoint retornou status: ${response.status}`);
            }
        } catch (fetchError) {
            console.log('‚ùå Erro ao acessar endpoint:', fetchError.message);
            console.log('   Verifique se o servidor est√° rodando na porta 3000');
        }

        // 5. Verificar configura√ß√£o do webhook
        console.log('\n5. Informa√ß√µes do webhook configurado:');
        console.log('   üìã Trigger: my_webhook');
        console.log('   üìã Tabela: public.my_table');
        console.log('   üìã Evento: INSERT');
        console.log('   üìã Fun√ß√£o: supabase_functions.http_request');
        console.log('   üìã URL: http://host.docker.internal:3000');
        console.log('   üìã M√©todo: POST');
        console.log('   üìã Headers: {"Content-Type":"application/json"}');
        console.log('   üìã Timeout: 1000ms');

        return true;

    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
        return false;
    }
}

// Fun√ß√£o para criar a tabela de teste se necess√°rio
async function createTestTable() {
    console.log('\nüîß Criando tabela de teste...');
    
    const createTableSQL = `
        CREATE TABLE IF NOT EXISTS my_table (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            data JSONB,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
        );
    `;

    try {
        const { error } = await supabase.rpc('exec_sql', { sql: createTableSQL });
        if (error) {
            console.error('‚ùå Erro ao criar tabela:', error.message);
            return false;
        }
        console.log('‚úÖ Tabela de teste criada');
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao executar SQL:', error.message);
        return false;
    }
}

// Fun√ß√£o para testar o webhook
async function testWebhook() {
    console.log('\nüß™ Testando webhook...');
    
    try {
        const testData = {
            test: true,
            timestamp: new Date().toISOString(),
            message: 'Teste do webhook'
        };

        const { data, error } = await supabase
            .from('my_table')
            .insert([{ data: testData }]);

        if (error) {
            console.error('‚ùå Erro ao inserir dados de teste:', error.message);
            return false;
        }

        console.log('‚úÖ Dados inseridos na tabela');
        console.log('   O webhook deve ter sido disparado');
        console.log('   Verifique os logs do seu servidor na porta 3000');
        
        return true;
    } catch (error) {
        console.error('‚ùå Erro durante teste:', error.message);
        return false;
    }
}

// Executar verifica√ß√£o
async function main() {
    console.log('üöÄ Iniciando verifica√ß√£o do webhook\n');
    
    const isAccessible = await verifyWebhookAccess();
    
    if (isAccessible) {
        console.log('\n‚úÖ Verifica√ß√£o conclu√≠da com sucesso');
        
        // Perguntar se deve criar tabela de teste
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        rl.question('\nDeseja criar uma tabela de teste e testar o webhook? (s/n): ', async (answer) => {
            if (answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim') {
                await createTestTable();
                await testWebhook();
            }
            
            console.log('\nüìã Resumo da verifica√ß√£o:');
            console.log('   - Conex√£o Supabase: ‚úÖ');
            console.log('   - Configura√ß√£o webhook: ‚úÖ');
            console.log('   - Endpoint acess√≠vel: Verificar logs acima');
            
            rl.close();
        });
    } else {
        console.log('\n‚ùå Verifica√ß√£o falhou');
        console.log('Verifique as configura√ß√µes e tente novamente');
    }
}

main().catch(console.error);