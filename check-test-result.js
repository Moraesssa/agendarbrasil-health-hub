// Script para verificar resultado do teste
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://ulebotjrsgheybhpdnxd.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVsZWJvdGpyc2doZXliaHBkbnhkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDU0MzkyNSwiZXhwIjoyMDY2MTE5OTI1fQ.SL5dtN5mpITgn5H0mxAJj9AzQ5bB_Fben2av__A1SMU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkTestResult() {
  console.log('üîç VERIFICANDO RESULTADO DO SEU TESTE\n');

  try {
    // Buscar dados atuais
    const { data: consultas } = await supabase.from('consultas').select('*').order('updated_at', { ascending: false });
    const { data: pagamentos } = await supabase.from('pagamentos').select('*').order('created_at', { ascending: false });

    console.log('üìä SITUA√á√ÉO ATUAL:');
    console.log(`   üìÖ Consultas: ${consultas?.length || 0}`);
    console.log(`   üí≥ Pagamentos: ${pagamentos?.length || 0}`);

    // Verificar se houve mudan√ßas
    const consultasPagas = consultas?.filter(c => c.status_pagamento === 'pago') || [];
    const consultasPendentes = consultas?.filter(c => c.status_pagamento === 'pendente') || [];

    console.log('\nüìã STATUS DAS CONSULTAS:');
    console.log(`   ‚úÖ Pagas: ${consultasPagas.length}`);
    console.log(`   ‚è≥ Pendentes: ${consultasPendentes.length}`);

    if (pagamentos && pagamentos.length > 0) {
      console.log('\nüéâ SUCESSO! PAGAMENTOS ENCONTRADOS:');
      pagamentos.forEach((pagamento, index) => {
        console.log(`\n  ${index + 1}. ID: ${pagamento.id.slice(-8)}`);
        console.log(`     Consulta: ${pagamento.consulta_id?.slice(-8) || 'N/A'}`);
        console.log(`     Valor: R$ ${pagamento.valor}`);
        console.log(`     Status: ${pagamento.status}`);
        console.log(`     Gateway: ${pagamento.gateway_id?.slice(-15) || 'N/A'}`);
        console.log(`     Criado: ${new Date(pagamento.created_at).toLocaleString('pt-BR')}`);
      });

      console.log('\n‚úÖ WEBHOOK FUNCIONANDO!');
      console.log('   O sistema de sincroniza√ß√£o est√° operacional!');
      
    } else {
      console.log('\n‚ùå NENHUM PAGAMENTO ENCONTRADO');
      console.log('   Poss√≠veis causas:');
      console.log('   1. Teste n√£o foi at√© o final (pagamento n√£o conclu√≠do)');
      console.log('   2. Webhook ainda n√£o processou');
      console.log('   3. Erro na fun√ß√£o stripe-webhook');
    }

    // Verificar consultas que mudaram recentemente
    const consultasRecentes = consultas?.filter(c => {
      const updatedAt = new Date(c.updated_at || c.created_at);
      const agora = new Date();
      const minutosAtras = (agora - updatedAt) / (1000 * 60);
      return minutosAtras <= 10; // √öltimos 10 minutos
    }) || [];

    if (consultasRecentes.length > 0) {
      console.log('\nüïê CONSULTAS ATUALIZADAS (√∫ltimos 10 min):');
      consultasRecentes.forEach((consulta, index) => {
        console.log(`\n  ${index + 1}. ID: ${consulta.id.slice(-8)}`);
        console.log(`     Status: ${consulta.status}/${consulta.status_pagamento}`);
        console.log(`     Valor: R$ ${consulta.valor || 'N/A'}`);
        console.log(`     Atualizado: ${new Date(consulta.updated_at || consulta.created_at).toLocaleString('pt-BR')}`);
      });
    }

    // Resultado final
    console.log('\nüéØ RESULTADO DO TESTE:');
    console.log('='.repeat(50));
    
    if (pagamentos && pagamentos.length > 0) {
      console.log('üéâ TESTE BEM-SUCEDIDO!');
      console.log('   ‚úÖ Webhook est√° funcionando');
      console.log('   ‚úÖ Pagamentos sendo registrados');
      console.log('   ‚úÖ Sistema de sincroniza√ß√£o operacional');
      
      console.log('\nüöÄ PR√ìXIMOS PASSOS:');
      console.log('   1. Testar na aplica√ß√£o: /agenda-paciente');
      console.log('   2. Verificar se consultas aparecem como "pagas"');
      console.log('   3. Sistema est√° pronto para produ√ß√£o!');
      
    } else {
      console.log('‚è≥ TESTE AINDA EM PROCESSAMENTO OU INCOMPLETO');
      console.log('   Aguarde alguns minutos e execute novamente');
      console.log('   Ou refa√ßa o teste completo');
    }

  } catch (error) {
    console.error('‚ùå Erro ao verificar resultado:', error);
  }
}

checkTestResult();