#!/usr/bin/env node

/**
 * Teste E2E para o fluxo de agendamento
 * Simula o comportamento do usu√°rio na p√°gina de agendamento
 * URL: https://agendarbrasil-health-hub.lovable.app/agendamento
 * // replaced by kiro @2025-01-15T20:30:00Z
 */

import fetch from 'node-fetch';
import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config();

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = process.env.VITE_SUPABASE_ANON_KEY;
const APP_URL = 'https://agendarbrasil-health-hub.lovable.app';

console.log('üß™ Iniciando teste E2E do fluxo de agendamento...\n');

// Fun√ß√£o para fazer requisi√ß√µes √† API
async function makeApiRequest(endpoint, options = {}) {
  const url = `${SUPABASE_URL}/rest/v1/${endpoint}`;
  
  const defaultHeaders = {
    'apikey': SUPABASE_ANON_KEY,
    'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
    'Content-Type': 'application/json',
    'Prefer': 'return=representation'
  };

  try {
    const response = await fetch(url, {
      headers: { ...defaultHeaders, ...options.headers },
      ...options
    });

    const data = await response.json();
    
    return {
      success: response.ok,
      status: response.status,
      data: data,
      error: response.ok ? null : data.message || 'Erro desconhecido'
    };
  } catch (error) {
    return {
      success: false,
      status: 0,
      data: null,
      error: error.message
    };
  }
}

// Fun√ß√£o para testar RPC
async function makeRpcRequest(functionName, params = {}) {
  const url = `${SUPABASE_URL}/rest/v1/rpc/${functionName}`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(params)
    });

    const data = await response.json();
    
    return {
      success: response.ok,
      status: response.status,
      data: data,
      error: response.ok ? null : data.message || 'Erro desconhecido'
    };
  } catch (error) {
    return {
      success: false,
      status: 0,
      data: null,
      error: error.message
    };
  }
}

// Teste 1: Verificar se as especialidades est√£o dispon√≠veis
async function testeEspecialidades() {
  console.log('üìã Teste 1: Carregamento de especialidades');
  
  const result = await makeRpcRequest('get_specialties');
  
  if (result.success && Array.isArray(result.data) && result.data.length > 0) {
    console.log(`  ‚úÖ Especialidades carregadas: ${result.data.length}`);
    console.log(`  üìù Primeiras 5: ${result.data.slice(0, 5).join(', ')}`);
    return { success: true, especialidades: result.data };
  } else {
    console.log(`  ‚ùå Falha ao carregar especialidades: ${result.error}`);
    return { success: false, error: result.error };
  }
}

// Teste 2: Verificar estados dispon√≠veis
async function testeEstados() {
  console.log('\nüó∫Ô∏è Teste 2: Carregamento de estados');
  
  const result = await makeRpcRequest('get_available_states');
  
  if (result.success && Array.isArray(result.data) && result.data.length > 0) {
    console.log(`  ‚úÖ Estados dispon√≠veis: ${result.data.length}`);
    console.log(`  üìç Estados: ${result.data.map(e => e.uf || e.nome).join(', ')}`);
    return { success: true, estados: result.data };
  } else {
    console.log(`  ‚ùå Falha ao carregar estados: ${result.error}`);
    return { success: false, error: result.error };
  }
}

// Teste 3: Verificar cidades por estado
async function testeCidades(estado = 'DF') {
  console.log(`\nüèôÔ∏è Teste 3: Carregamento de cidades para ${estado}`);
  
  const result = await makeRpcRequest('get_available_cities', { state_uf: estado });
  
  if (result.success && Array.isArray(result.data)) {
    console.log(`  ‚úÖ Cidades em ${estado}: ${result.data.length}`);
    if (result.data.length > 0) {
      console.log(`  üèòÔ∏è Cidades: ${result.data.map(c => c.cidade).join(', ')}`);
    }
    return { success: true, cidades: result.data };
  } else {
    console.log(`  ‚ùå Falha ao carregar cidades: ${result.error}`);
    return { success: false, error: result.error };
  }
}

// Teste 4: Buscar m√©dicos por especialidade e localiza√ß√£o
async function testeMedicos(especialidade = 'Cardiologia', cidade = 'Bras√≠lia', estado = 'DF') {
  console.log(`\nüë®‚Äç‚öïÔ∏è Teste 4: Busca de m√©dicos`);
  console.log(`  üîç Buscando: ${especialidade} em ${cidade}/${estado}`);
  
  const result = await makeRpcRequest('get_doctors_by_location_and_specialty', {
    p_specialty: especialidade,
    p_city: cidade,
    p_state: estado
  });
  
  if (result.success && Array.isArray(result.data)) {
    console.log(`  ‚úÖ M√©dicos encontrados: ${result.data.length}`);
    
    if (result.data.length > 0) {
      const medico = result.data[0];
      console.log(`  üë®‚Äç‚öïÔ∏è Exemplo: Dr. ${medico.display_name || 'Nome n√£o dispon√≠vel'}`);
      console.log(`  üìã CRM: ${medico.crm || 'N√£o informado'}`);
      console.log(`  üè• Local: ${medico.local_nome || 'N√£o informado'}`);
    } else {
      console.log('  ‚ö†Ô∏è Nenhum m√©dico encontrado para os crit√©rios especificados');
    }
    
    return { success: true, medicos: result.data };
  } else {
    console.log(`  ‚ùå Falha ao buscar m√©dicos: ${result.error}`);
    return { success: false, error: result.error };
  }
}

// Teste 5: Verificar dados b√°sicos de m√©dicos (acesso p√∫blico)
async function testeDadosPublicos() {
  console.log('\nüîì Teste 5: Acesso p√∫blico aos dados de m√©dicos');
  
  const result = await makeApiRequest('medicos?select=id,crm,especialidades&limit=5');
  
  if (result.success) {
    console.log(`  ‚úÖ Dados p√∫blicos acess√≠veis: ${result.data?.length || 0} m√©dicos`);
    
    if (result.data && result.data.length > 0) {
      console.log('  üìä Exemplo de dados p√∫blicos:');
      const medico = result.data[0];
      console.log(`    - ID: ${medico.id}`);
      console.log(`    - CRM: ${medico.crm || 'N√£o informado'}`);
      console.log(`    - Especialidades: ${medico.especialidades?.join(', ') || 'N√£o informado'}`);
    }
    
    return { success: true, dados: result.data };
  } else {
    console.log(`  ‚ùå Falha no acesso p√∫blico: ${result.error}`);
    return { success: false, error: result.error };
  }
}

// Teste 6: Simular fluxo completo de agendamento
async function testeFluxoCompleto() {
  console.log('\nüîÑ Teste 6: Simula√ß√£o do fluxo completo de agendamento');
  
  const resultados = {
    especialidades: false,
    estados: false,
    cidades: false,
    medicos: false,
    dadosPublicos: false
  };
  
  // Passo 1: Carregar especialidades
  console.log('  üìã Passo 1: Selecionando especialidade...');
  const especialidadesResult = await testeEspecialidades();
  resultados.especialidades = especialidadesResult.success;
  
  if (!especialidadesResult.success) {
    console.log('  ‚ùå Fluxo interrompido: N√£o foi poss√≠vel carregar especialidades');
    return resultados;
  }
  
  const especialidadeSelecionada = especialidadesResult.especialidades[0];
  console.log(`  ‚úÖ Especialidade selecionada: ${especialidadeSelecionada}`);
  
  // Passo 2: Carregar estados
  console.log('\n  üó∫Ô∏è Passo 2: Selecionando estado...');
  const estadosResult = await testeEstados();
  resultados.estados = estadosResult.success;
  
  if (!estadosResult.success) {
    console.log('  ‚ùå Fluxo interrompido: N√£o foi poss√≠vel carregar estados');
    return resultados;
  }
  
  const estadoSelecionado = estadosResult.estados[0];
  console.log(`  ‚úÖ Estado selecionado: ${estadoSelecionado.uf || estadoSelecionado.nome}`);
  
  // Passo 3: Carregar cidades
  console.log('\n  üèôÔ∏è Passo 3: Selecionando cidade...');
  const cidadesResult = await testeCidades(estadoSelecionado.uf || estadoSelecionado.nome);
  resultados.cidades = cidadesResult.success;
  
  if (!cidadesResult.success || cidadesResult.cidades.length === 0) {
    console.log('  ‚ùå Fluxo interrompido: N√£o h√° cidades dispon√≠veis');
    return resultados;
  }
  
  const cidadeSelecionada = cidadesResult.cidades[0];
  console.log(`  ‚úÖ Cidade selecionada: ${cidadeSelecionada.cidade}`);
  
  // Passo 4: Buscar m√©dicos
  console.log('\n  üë®‚Äç‚öïÔ∏è Passo 4: Buscando m√©dicos dispon√≠veis...');
  const medicosResult = await testeMedicos(
    especialidadeSelecionada,
    cidadeSelecionada.cidade,
    cidadeSelecionada.estado
  );
  resultados.medicos = medicosResult.success;
  
  // Passo 5: Verificar dados p√∫blicos
  console.log('\n  üîì Passo 5: Verificando acesso aos dados...');
  const dadosResult = await testeDadosPublicos();
  resultados.dadosPublicos = dadosResult.success;
  
  return resultados;
}

// Teste 7: Verificar performance das consultas
async function testePerformance() {
  console.log('\n‚ö° Teste 7: Performance das consultas');
  
  const testes = [
    { nome: 'Especialidades', func: () => makeRpcRequest('get_specialties') },
    { nome: 'Estados', func: () => makeRpcRequest('get_available_states') },
    { nome: 'Cidades DF', func: () => makeRpcRequest('get_available_cities', { state_uf: 'DF' }) },
    { nome: 'M√©dicos p√∫blicos', func: () => makeApiRequest('medicos?select=id,crm&limit=10') }
  ];
  
  for (const teste of testes) {
    const inicio = Date.now();
    const resultado = await teste.func();
    const tempo = Date.now() - inicio;
    
    const status = resultado.success ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${teste.nome}: ${tempo}ms`);
  }
}

// Fun√ß√£o principal
async function main() {
  try {
    // Verificar configura√ß√£o
    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      console.log('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas');
      console.log('   Verifique VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no arquivo .env');
      process.exit(1);
    }
    
    console.log(`üîó Testando aplica√ß√£o: ${APP_URL}/agendamento`);
    console.log(`üì° Supabase URL: ${SUPABASE_URL}`);
    console.log('‚îÅ'.repeat(60));
    
    // Executar testes individuais
    await testeEspecialidades();
    await testeEstados();
    await testeCidades();
    await testeMedicos();
    await testeDadosPublicos();
    
    console.log('\n' + '‚îÅ'.repeat(60));
    
    // Executar fluxo completo
    const resultadosFluxo = await testeFluxoCompleto();
    
    console.log('\n' + '‚îÅ'.repeat(60));
    
    // Teste de performance
    await testePerformance();
    
    console.log('\n' + '‚îÅ'.repeat(60));
    
    // Resumo final
    console.log('\nüìä RESUMO DOS TESTES:');
    console.log(`  Especialidades: ${resultadosFluxo.especialidades ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Estados: ${resultadosFluxo.estados ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Cidades: ${resultadosFluxo.cidades ? '‚úÖ' : '‚ùå'}`);
    console.log(`  M√©dicos: ${resultadosFluxo.medicos ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Dados P√∫blicos: ${resultadosFluxo.dadosPublicos ? '‚úÖ' : '‚ùå'}`);
    
    const todosPassaram = Object.values(resultadosFluxo).every(r => r === true);
    
    if (todosPassaram) {
      console.log('\nüéâ TODOS OS TESTES PASSARAM!');
      console.log('   O fluxo de agendamento est√° funcionando corretamente.');
    } else {
      console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM');
      console.log('   Verifique os erros acima e as pol√≠ticas RLS no Supabase.');
    }
    
    console.log('\nüí° Para testar manualmente, acesse:');
    console.log(`   ${APP_URL}/agendamento`);
    
  } catch (error) {
    console.error('‚ùå Erro durante a execu√ß√£o dos testes:', error.message);
    process.exit(1);
  }
}

// Executar o script
main();